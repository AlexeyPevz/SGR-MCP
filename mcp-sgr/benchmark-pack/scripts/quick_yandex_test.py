#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç YandexGPT —Å SGR
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
"""

import json
import time
import os
from yandex_gpt_adapter import YandexGPTAdapter

def test_simple_task(adapter, model, task, sgr_mode=None):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    
    print(f"\n{'='*60}")
    print(f"–ú–æ–¥–µ–ª—å: {model}, SGR: {sgr_mode or 'OFF'}")
    print(f"–ó–∞–¥–∞—á–∞: {task[:100]}...")
    print('-'*60)
    
    result = adapter.call_model(
        messages=[{"role": "user", "content": task}],
        model=model,
        sgr_mode=sgr_mode,
        temperature=0.6,
        max_tokens=500
    )
    
    if result["success"]:
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        print(f"‚è±Ô∏è  –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {result['latency']:.2f} —Å–µ–∫")
        print(f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${result['cost']:.5f}")
        print(f"üìä –¢–æ–∫–µ–Ω—ã: {result['tokens_used']}")
        print(f"\nüìù –û—Ç–≤–µ—Ç:")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –µ—Å–ª–∏ —ç—Ç–æ SGR —Ä–µ–∂–∏–º
        if sgr_mode:
            try:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                response = result['content']
                if '```json' in response:
                    start = response.find('```json') + 7
                    end = response.find('```', start)
                    json_str = response[start:end].strip()
                else:
                    json_str = response
                
                parsed = json.loads(json_str)
                print(json.dumps(parsed, indent=2, ensure_ascii=False))
                print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω!")
            except:
                print(result['content'][:500] + "..." if len(result['content']) > 500 else result['content'])
                print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON")
        else:
            print(result['content'][:500] + "..." if len(result['content']) > 500 else result['content'])
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    return result

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç"""
    
    print("üß™ –¢–ï–°–¢ YANDEXGPT –° SGR")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if not os.environ.get("YANDEX_API_KEY") or not os.environ.get("YANDEX_FOLDER_ID"):
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   export YANDEX_API_KEY='your-key'")
        print("   export YANDEX_FOLDER_ID='your-folder-id'")
        print("\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–µ–π:")
        print("1. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ https://cloud.yandex.ru")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç")
        print("3. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á")
        return
    
    adapter = YandexGPTAdapter()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    tasks = [
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–¥–∞—á–∞ –∫–æ–¥–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        "–ù–∞–ø–∏—à–∏ Python —Ñ—É–Ω–∫—Ü–∏—é is_even(n) –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∏—Å–ª–æ —á–µ—Ç–Ω—ã–º. –î–æ–±–∞–≤—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.",
        
        # –ó–∞–¥–∞—á–∞ –ø–æ—Å–ª–æ–∂–Ω–µ–µ
        "–ù–∞–ø–∏—à–∏ Python —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ CSV –≤ JSON. –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, —á–∏—Ç–∞—Ç—å CSV –∏ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å JSON. –û–±—Ä–∞–±–æ—Ç–∞–π —Å–ª—É—á–∞–∏ —Å –ø—É—Å—Ç—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏.",
        
        # –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
        "–ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è SGR (Schema-Guided Reasoning) –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç–≤–µ—Ç–æ–≤ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π. –í—ã–¥–µ–ª–∏ 3-4 –∫–ª—é—á–µ–≤—ã—Ö –ø—É–Ω–∫—Ç–∞."
    ]
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    results_summary = {
        "yandexgpt-lite": {"off": [], "lite": [], "full": []},
        "comparison": {}
    }
    
    # –¢–µ—Å—Ç –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏ —Å–æ –≤—Å–µ–º–∏ —Ä–µ–∂–∏–º–∞–º–∏
    print("\n" + "üéØ –ó–ê–î–ê–ß–ê 1: –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è" + "\n")
    
    for sgr_mode in [None, "lite", "full"]:
        result = test_simple_task(adapter, "yandexgpt-lite", tasks[0], sgr_mode)
        if result["success"]:
            results_summary["yandexgpt-lite"][sgr_mode or "off"].append({
                "latency": result["latency"],
                "cost": result["cost"],
                "tokens": result["tokens_used"]
            })
    
    # –¢–µ—Å—Ç –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á —Ç–æ–ª—å–∫–æ —Å SGR-lite
    print("\n" + "üéØ –ó–ê–î–ê–ß–ê 2: CSV‚ÜíJSON –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä (SGR-lite)" + "\n")
    test_simple_task(adapter, "yandexgpt-lite", tasks[1], "lite")
    
    print("\n" + "üéØ –ó–ê–î–ê–ß–ê 3: –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ SGR (SGR-lite)" + "\n")
    test_simple_task(adapter, "yandexgpt-lite", tasks[2], "lite")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("="*60)
    
    print("\nüè∑Ô∏è YandexGPT Lite:")
    for mode in ["off", "lite", "full"]:
        data = results_summary["yandexgpt-lite"][mode]
        if data:
            avg_latency = sum(r["latency"] for r in data) / len(data)
            avg_cost = sum(r["cost"] for r in data) / len(data)
            avg_tokens = sum(r["tokens"] for r in data) / len(data)
            
            print(f"\n  SGR-{mode.upper() if mode != 'off' else 'OFF'}:")
            print(f"    –°—Ä–µ–¥–Ω—è—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {avg_latency:.2f} —Å–µ–∫")
            print(f"    –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${avg_cost:.5f}")
            print(f"    –°—Ä–µ–¥–Ω–∏–µ —Ç–æ–∫–µ–Ω—ã: {avg_tokens:.0f}")
    
    print("\nüí° –í–´–í–û–î–´:")
    print("1. YandexGPT Lite –æ—á–µ–Ω—å –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å (–æ–±—ã—á–Ω–æ < 1 —Å–µ–∫)")
    print("2. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ JSON")
    print("3. –•–æ—Ä–æ—à–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä—É—Å—Å–∫–∏–º —è–∑—ã–∫–æ–º")
    print("4. SGR —É–ª—É—á—à–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤")
    print("5. –°—Ç–æ–∏–º–æ—Å—Ç—å ~$0.002 –∑–∞ 1k —Ç–æ–∫–µ–Ω–æ–≤ (–¥–µ—à–µ–≤–ª–µ GPT-3.5)")
    
    print("\nüìå –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º–∏ –º–æ–¥–µ–ª—è–º–∏:")
    print("- Mistral-7B-Free: –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ")
    print("- GPT-3.5-Turbo: $0.50/1k —Ç–æ–∫–µ–Ω–æ–≤ (–≤ 250 —Ä–∞–∑ –¥–æ—Ä–æ–∂–µ)")
    print("- YandexGPT Lite: –æ—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")

if __name__ == "__main__":
    main()