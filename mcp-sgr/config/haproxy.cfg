global
    daemon
    maxconn 4096
    log stdout local0
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option log-health-checks
    option forwardfor
    option http-server-close
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

frontend mcp_sgr_frontend
    bind *:80
    bind *:443 ssl crt /certs/mcp-sgr.pem
    
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s)
    http-request track-sc0 src
    http-request reject if { sc_http_req_rate(0) gt 20 }
    
    # Health check endpoint (bypass auth)
    acl is_health path_beg /health
    use_backend mcp_sgr_backend if is_health
    
    # API endpoints
    acl is_api path_beg /v1/ /docs /redoc /openapi
    use_backend mcp_sgr_backend if is_api
    
    # Default backend
    default_backend mcp_sgr_backend

backend mcp_sgr_backend
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Blue deployment (active)
    server mcp-sgr-blue mcp-sgr-blue:8080 check inter 5s fastinter 2s fall 3 rise 2 weight 100
    
    # Green deployment (standby) - disabled by default
    server mcp-sgr-green mcp-sgr-green:8080 check inter 5s fastinter 2s fall 3 rise 2 weight 0 backup

# Statistics interface
frontend stats
    bind *:8404
    stats enable
    stats uri /
    stats refresh 10s
    stats show-legends
    stats show-node
    stats admin if TRUE
    
    # Authentication for stats (optional)
    # stats auth admin:${HAPROXY_STATS_PASSWORD}

# Blue/Green deployment support
frontend deployment_control
    bind *:8405
    
    # Enable green deployment
    acl enable_green url_param(action) -m str enable_green
    http-request set-var(txn.action) str(enable_green) if enable_green
    
    # Disable green deployment  
    acl disable_green url_param(action) -m str disable_green
    http-request set-var(txn.action) str(disable_green) if disable_green
    
    # Switch traffic to green
    acl switch_to_green url_param(action) -m str switch_to_green
    http-request set-var(txn.action) str(switch_to_green) if switch_to_green
    
    # Switch traffic to blue
    acl switch_to_blue url_param(action) -m str switch_to_blue
    http-request set-var(txn.action) str(switch_to_blue) if switch_to_blue
    
    # Response with current status
    http-request return status 200 content-type "application/json" string "{\"status\":\"ok\",\"action\":\"deployment_control\"}"