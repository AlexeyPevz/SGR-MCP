version: '3.8'

services:
  # MCP-SGR Server (Production - Blue/Green deployment ready)
  mcp-sgr-blue:
    image: ghcr.io/mcp-sgr/mcp-sgr:${VERSION:-latest}
    container_name: mcp-sgr-blue
    ports:
      - "8080:8080"
    environment:
      # Environment
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - DEPLOYMENT_SLOT=blue
      
      # LLM Configuration
      - LLM_BACKENDS=openrouter,ollama
      - OLLAMA_HOST=http://ollama-prod:11434
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      
      # SGR Configuration
      - SGR_BUDGET_DEPTH=standard
      - SGR_PRE_ANALYSIS=auto
      - SGR_POST_ANALYSIS=standard
      
      # Cache Configuration
      - CACHE_ENABLED=true
      - CACHE_STORE=redis://redis-cluster:6379/0
      
      # Trace Configuration
      - TRACE_ENABLED=true
      - TRACE_STORE=postgresql://postgres:${POSTGRES_PASSWORD}@postgres-prod:5432/traces
      
      # HTTP Configuration
      - HTTP_ENABLED=true
      - HTTP_PORT=8080
      - HTTP_HOST=0.0.0.0
      - HTTP_REQUIRE_AUTH=true
      - HTTP_AUTH_TOKEN=${PRODUCTION_AUTH_TOKEN}
      - HTTP_CORS_ORIGINS=https://api.mcp-sgr.dev,https://mcp-sgr.dev
      
      # Rate Limiting (Production limits)
      - RATE_LIMIT_ENABLED=true
      - RATE_LIMIT_MAX_RPM=1000
      - RATE_LIMIT_BACKEND=redis
      
      # Security
      - SECURITY_HEADERS_ENABLED=true
      - TLS_CERT_PATH=/certs/tls.crt
      - TLS_KEY_PATH=/certs/tls.key
      
      # Telemetry
      - OTEL_ENABLED=true
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector-prod:4317
      - OTEL_SERVICE_NAME=mcp-sgr-production
      - OTEL_RESOURCE_ATTRIBUTES=service.instance.id=blue,deployment.environment=production
      
    volumes:
      - prod_data:/app/data
      - prod_logs:/app/logs
      - ./config/router_policy_prod.yaml:/app/config/router_policy.yaml:ro
      - ./certs:/certs:ro
    depends_on:
      - redis-cluster
      - postgres-prod
      - ollama-prod
    restart: unless-stopped
    networks:
      - production-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Green deployment slot (for blue/green deployment)
  mcp-sgr-green:
    image: ghcr.io/mcp-sgr/mcp-sgr:${VERSION:-latest}
    container_name: mcp-sgr-green
    ports:
      - "8082:8080"  # Different port, not exposed to load balancer initially
    environment:
      # Same config as blue but different deployment slot
      - ENVIRONMENT=production
      - LOG_LEVEL=info
      - DEPLOYMENT_SLOT=green
      - OTEL_RESOURCE_ATTRIBUTES=service.instance.id=green,deployment.environment=production
      # ... (copy all environment variables from blue)
    volumes:
      - prod_data:/app/data
      - prod_logs:/app/logs
      - ./config/router_policy_prod.yaml:/app/config/router_policy.yaml:ro
      - ./certs:/certs:ro
    depends_on:
      - redis-cluster
      - postgres-prod
      - ollama-prod
    restart: unless-stopped
    networks:
      - production-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G

  # Load Balancer (HAProxy)
  load-balancer:
    image: haproxy:2.8-alpine
    container_name: mcp-sgr-lb
    ports:
      - "80:80"
      - "443:443"
      - "8404:8404"  # HAProxy stats
    volumes:
      - ./config/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      - ./certs:/certs:ro
    depends_on:
      - mcp-sgr-blue
    networks:
      - production-network
    restart: unless-stopped

  # Redis Cluster for Production
  redis-cluster:
    image: redis:7-alpine
    container_name: redis-cluster
    ports:
      - "6379:6379"
    volumes:
      - prod_redis:/data
    networks:
      - production-network
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # PostgreSQL for Production
  postgres-prod:
    image: postgres:15-alpine
    container_name: postgres-prod
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mcp_sgr_production
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - prod_postgres:/var/lib/postgresql/data
      - ./scripts/init-prod-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - production-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Ollama for Production
  ollama-prod:
    image: ollama/ollama:latest
    container_name: ollama-prod
    ports:
      - "11434:11434"
    volumes:
      - prod_ollama:/root/.ollama
    networks:
      - production-network
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_MAX_LOADED_MODELS=3
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  # Production Monitoring Stack
  otel-collector-prod:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector-prod
    ports:
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP
    volumes:
      - ./config/otel-config-prod.yaml:/etc/otelcol-contrib/otel-collector-config.yaml:ro
    networks:
      - production-network
    restart: unless-stopped

  prometheus-prod:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prod_prometheus:/prometheus
    networks:
      - production-network
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana-prod:
    image: grafana/grafana:latest
    container_name: grafana-prod
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_SECURITY_ALLOW_EMBEDDING=true
    volumes:
      - prod_grafana:/var/lib/grafana
      - ./config/grafana-datasources-prod.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./config/grafana-dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - production-network
    restart: unless-stopped

  # Log aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki-prod
    ports:
      - "3100:3100"
    volumes:
      - ./config/loki-config.yml:/etc/loki/local-config.yaml:ro
      - prod_loki:/loki
    networks:
      - production-network
    restart: unless-stopped

  # Backup service
  backup-service:
    image: alpine:latest
    container_name: backup-service
    volumes:
      - prod_data:/backup/data:ro
      - prod_postgres:/backup/postgres:ro
      - ./scripts/backup.sh:/backup.sh:ro
    networks:
      - production-network
    restart: "no"
    command: crond -f
    environment:
      - BACKUP_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}

volumes:
  prod_data:
  prod_logs:
  prod_redis:
  prod_postgres:
  prod_ollama:
  prod_prometheus:
  prod_grafana:
  prod_loki:

networks:
  production-network:
    driver: bridge
    name: mcp-sgr-production